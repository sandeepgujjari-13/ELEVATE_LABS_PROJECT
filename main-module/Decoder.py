import tkinter as tkfrom tkinter import filedialogimport refrom PIL import Imageclass SteganographyDecoderGUI:    def __init__(self, root):        self.root = root        self.root.title("Steganography Decoder GUI")        self.frame_start_entry = tk.Entry(root, width=10)        self.frame_start_entry.grid(row=0, column=1)        tk.Label(root, text="Start Frame:").grid(row=0, column=0)        self.frame_end_entry = tk.Entry(root, width=10)        self.frame_end_entry.grid(row=1, column=1)        tk.Label(root, text="End Frame:").grid(row=1, column=0)        self.frame_location_entry = tk.Entry(root, width=40)        self.frame_location_entry.grid(row=2, column=1)        tk.Label(root, text="Frames Location:").grid(row=2, column=0)        tk.Button(root, text="Browse", command=self.browse_frames).grid(row=2, column=2)        self.lsb_bits_entry = tk.Entry(root, width=10)        self.lsb_bits_entry.grid(row=3, column=1)        tk.Label(root, text="LSB Bits:").grid(row=3, column=0)        tk.Button(root, text="Decode", command=self.decode).grid(row=4, columnspan=3)    def browse_frames(self):        frame_location = filedialog.askdirectory()        self.frame_location_entry.delete(0, tk.END)        self.frame_location_entry.insert(0, frame_location)    def decode(self):        try:            frame_start = int(self.frame_start_entry.get())            frame_end = int(self.frame_end_entry.get())            frame_location = self.frame_location_entry.get()            lsb_bits = int(self.lsb_bits_entry.get())        except ValueError:            print("Invalid input. Please enter valid integers for frame range and LSB bits.")            return        decoded_text = ""        print("Extracting Data...")        for convnum in range(frame_start, frame_end + 1):            try:                decoded_text += self.decode_frame(convnum, frame_location, lsb_bits)                print("Data found in Frame %d" % convnum)            except StopIteration:                print("No data found in Frame %d" % convnum)        # Save the decoded text to a file        output_file_path = 'output/decoded_frame.txt'        with open(output_file_path, 'w') as decoded_text_file:            decoded_text_file.write('Decoded Text:\n')            decoded_text_file.write(decoded_text)        print("\nExtraction Complete! Decoded text saved in", output_file_path)    def decode_frame(self, number, frame_location, lsb_bits):        data = ''        numbering = str(number)        decoder_numbering = frame_location + "\\" + numbering + ".png"        image = Image.open(decoder_numbering, 'r')        imagedata = iter(image.getdata())        while True:            pixels = [value for value in imagedata.__next__()[:3] + imagedata.__next__()[:3] + imagedata.__next__()[:3]]            binstr = ''            for i in pixels[:lsb_bits]:                if i % 2 == 0:                    binstr += '0'                else:                    binstr += '1'            if re.match("[ -~]", chr(int(binstr, 2))) is not None:  # only decode printable data                data += chr(int(binstr, 2))            if pixels[-1] % 2 != 0:                return dataif __name__ == "__main__":    root = tk.Tk()    app = SteganographyDecoderGUI(root)    root.mainloop()