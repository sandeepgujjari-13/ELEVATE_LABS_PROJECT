import mathimport tkinter as tkfrom tkinter import filedialogfrom PIL import Imageclass SteganographyGUI:    def __init__(self, root):        self.root = root        self.root.title("Steganography Encoder GUI")        self.frame_start_entry = tk.Entry(root, width=10)        self.frame_start_entry.grid(row=0, column=1)        tk.Label(root, text="Start Frame:").grid(row=0, column=0)        self.frame_end_entry = tk.Entry(root, width=10)        self.frame_end_entry.grid(row=1, column=1)        tk.Label(root, text="End Frame:").grid(row=1, column=0)        self.frame_location_entry = tk.Entry(root, width=40)        self.frame_location_entry.grid(row=2, column=1)        tk.Label(root, text="Frames Location:").grid(row=2, column=0)        tk.Button(root, text="Browse", command=self.browse_frames).grid(row=2, column=2)        self.filename_entry = tk.Entry(root, width=40)        self.filename_entry.grid(row=3, column=1)        tk.Label(root, text="File to Hide (inc. extension):").grid(row=3, column=0)        tk.Button(root, text="Browse", command=self.browse_file_to_hide).grid(row=3, column=2)        tk.Button(root, text="Encode", command=self.encode).grid(row=4, columnspan=3)    def browse_frames(self):        frame_location = filedialog.askdirectory()        self.frame_location_entry.delete(0, tk.END)        self.frame_location_entry.insert(0, frame_location)    def browse_file_to_hide(self):        filename = filedialog.askopenfilename()        self.filename_entry.delete(0, tk.END)        self.filename_entry.insert(0, filename)    def encode(self):        try:            frame_start = int(self.frame_start_entry.get())            frame_end = int(self.frame_end_entry.get())            frame_location = self.frame_location_entry.get()            filename = self.filename_entry.get()        except ValueError:            print("Invalid input. Please enter valid integers for frame range.")            return        total_frame = frame_end - frame_start + 1        try:            with open(filename) as fileinput:                filedata = fileinput.read()        except FileNotFoundError:            print("\nFile to hide not found! Exiting...")            return        datapoints = math.ceil(len(filedata) / total_frame)        counter = frame_start        print("Performing Steganography...")        for convnum in range(0, len(filedata), datapoints):            numbering = frame_location + "\\" + str(counter) + ".png"            encodetext = filedata[convnum:convnum + datapoints]            try:                image = Image.open(numbering, 'r')            except FileNotFoundError:                print("\n%d.png not found! Exiting..." % counter)                return            newimage = image.copy()            self.encoder(newimage, encodetext)            new_img_name = numbering            newimage.save(new_img_name, str(new_img_name.split(".")[1].upper()))            counter += 1        print("Complete!\n")    def generateData(self, data):        newdata = [format(ord(i), '08b') for i in data]        return newdata    def modifyPixel(self, pixel, data):        datalist = self.generateData(data)        lengthofdata = len(datalist)        imagedata = iter(pixel)        for i in range(lengthofdata):            pixel = [value for value in imagedata.__next__()[:3] + imagedata.__next__()[:3] + imagedata.__next__()[:3]]            for j in range(0, 8):                if (datalist[i][j] == '0' and pixel[j] % 2 != 0):                    pixel[j] -= 1                elif (datalist[i][j] == '1' and pixel[j] % 2 == 0):                    if (pixel[j] != 0):                        pixel[j] -= 1                    else:                        pixel[j] += 1            if (i == lengthofdata - 1):                if (pixel[-1] % 2 == 0):                    if (pixel[-1] != 0):                        pixel[-1] -= 1                    else:                        pixel[-1] += 1            else:                if (pixel[-1] % 2 != 0):                    pixel[-1] -= 1            pixel = tuple(pixel)            yield pixel[0:3]            yield pixel[3:6]            yield pixel[6:9]    def encoder(self, newimage, data):        w = newimage.size[0]        (x, y) = (0, 0)        for pixel in self.modifyPixel(newimage.getdata(), data):            newimage.putpixel((x, y), pixel)            if (x == w - 1):                x = 0                y += 1            else:                x += 1if __name__ == "__main__":    root = tk.Tk()    app = SteganographyGUI(root)    root.mainloop()